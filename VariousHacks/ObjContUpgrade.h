#pragma once

void InitObjContUpgrade()
{
	// ai::ObjContainer::InnerContainer::InnerContainer
	//0063086D                 push    4000h
	injector::WriteMemory<uint32_t>(0x0063086D + 1, 0x8000, true);
	//0063087F                 push    4000h
	injector::WriteMemory<uint32_t>(0x0063087F + 1, 0x8000, true);

	// ai::ObjContainer::InnerContainer::Clear
	//0063098F                 push    4000h
	injector::WriteMemory<uint32_t>(0x0063098F + 1, 0x8000, true);
	//006309A1                 push    4000h
	injector::WriteMemory<uint32_t>(0x006309A1 + 1, 0x8000, true);

	// ai::ObjContainer::InnerContainer::Add
	// 0063044A                 shl     eax, 0Eh
	injector::WriteMemory<uint8_t>(0x0063044A + 2, 0x0F, true);
	// 0062FFDD                 push    4000h
	injector::WriteMemory<uint32_t>(0x0062FFDD + 1, 0x8000, true);

	//ai::ObjContainer::LoadNodeStatesFromXml
	//0062E4D9                 cmp     eax, 4000h
	injector::WriteMemory<uint32_t>(0x0062E4D9 + 1, 0x8000, true);

	//ai::_export_ObjContainer_GetEntityByObjId
	//0062E800                 sar     eax, 0Eh
	injector::WriteMemory<uint8_t>(0x0062E800 + 2, 0x0F, true);

	//ai::ObjContainer::Clear
	//00631387                 shl     eax, 0Eh
	injector::WriteMemory<uint8_t>(0x00631387 + 2, 0x0F, true);

	// sar eax 0x0E
	std::vector<injector::memory_pointer_tr> sar_addresses{
		0x00409113,
		0x00409173,
		0x0040C328,
		0x0040C368,
		0x00432F7C,
		0x0043430C,
		0x00435B03,
		0x00435B7A,
		0x004360E6,
		0x00437CA3,
		0x00437D1A,
		0x004387A6,
		0x0043B72A,
		0x0043DAD7,
		0x0043DC18,
		0x0043EF6A,
		0x0043F23C,
		0x0043F4B3,
		0x004407DA,
		0x0044223C,
		0x0044290A,
		0x00445825,
		0x00445DF2,
		0x0044A02C,
		0x0045383D,
		0x004571C3,
		0x00457FAA,
		0x00458006,
		0x004590F6,
		0x00459121,
		0x00459345,
		0x00459635,
		0x004613F5,
		0x00466735,
		0x00466C9C,
		0x004682D2,
		0x00468365,
		0x00468422,
		0x00468573,
		0x00468775,
		0x00468D35,
		0x00468F42,
		0x004693D5,
		0x00469615,
		0x004698A9,
		0x004699D8,
		0x00469C12,
		0x0046A065,
		0x0046A2A7,
		0x0046DDCD,
		0x0046DF14,
		0x004716DA,
		0x004743FC,
		0x004764C4,
		0x0047B9DC,
		0x0047CFEC,
		0x0047FEEC,
		0x00483AEC,
		0x0048526C,
		0x004888DC,
		0x0048B65C,
		0x0048DB02,
		0x0048E1A5,
		0x0048E27F,
		0x0048E3DF,
		0x0048E55F,
		0x0048E696,
		0x0048EBE2,
		0x0048ECAC,
		0x0048ED3B,
		0x0048EDDF,
		0x0048F0FF,
		0x0048F278,
		0x0048F36C,
		0x0048F453,
		0x0048F9F7,
		0x0048FB54,
		0x0048FC7C,
		0x004904AD,
		0x00490ABF,
		0x00490C2F,
		0x0049120C,
		0x004913B1,
		0x00491452,
		0x004914EC,
		0x00491543,
		0x00491881,
		0x00491931,
		0x0049592A,
		0x0049663A,
		0x00496D4A,
		0x00498A73,
		0x00499775,
		0x0049D82A,
		0x0049DFDA,
		0x0049E359,
		0x004A07FC,
		0x004A2224,
		0x004A29AB,
		0x004A2DCA,
		0x004A3022,
		0x004A3B8A,
		0x004A3D07,
		0x004D6C4B,
		0x004F9073,
		0x0050DF56,
		0x0050DFCE,
		0x0050F210,
		0x00513B86,
		0x00514616,
		0x00514676,
		0x0051980A,
		0x0051A309,
		0x0051A44E,
		0x0051A5A5,
		0x0051A733,
		0x0051CBCC,
		0x0051CC2C,
		0x0051DEBA,
		0x0051DF1C,
		0x0052492C,
		0x0052564A,
		0x0052686C,
		0x0052727A,
		0x00528214,
		0x0052892A,
		0x0052A880,
		0x0052A8FF,
		0x0052AE17,
		0x0052AEA7,
		0x0052B60A,
		0x0052DCA2,
		0x0052DE93,
		0x00534AB6,
		0x00534FD7,
		0x0053619A,
		0x0053884A,
		0x0053D41A,
		0x0054945A,
		0x00550AD4,
		0x00550B16,
		0x00550BB4,
		0x00550BF6,
		0x00550C86,
		0x00550D0A,
		0x00550D94,
		0x00550ED6,
		0x005512EB,
		0x0055135B,
		0x00553131,
		0x005531EB,
		0x00553231,
		0x00553383,
		0x005537B0,
		0x00553961,
		0x005539A3,
		0x00553A11,
		0x00553A53,
		0x00553AC2,
		0x00553B04,
		0x00553F0B,
		0x00553F66,
		0x0055441D,
		0x005544E7,
		0x00554584,
		0x00555191,
		0x005551D3,
		0x005553B6,
		0x005555DA,
		0x00555816,
		0x0055D69E,
		0x005601D9,
		0x005616B0,
		0x00561870,
		0x0056B1BF,
		0x0056C3D0,
		0x005743D4,
		0x0057456A,
		0x00581C06,
		0x00587335,
		0x005DCC14,
		0x005DCD3E,
		0x005DCE4C,
		0x005DCF71,
		0x005DCFB6,
		0x005DD013,
		0x005DD201,
		0x005DD227,
		0x005DD2F1,
		0x005DD317,
		0x005DD3A1,
		0x005DD3E9,
		0x005DD591,
		0x005DDB75,
		0x005DDC6D,
		0x005DDE70,
		0x005DE073,
		0x005DE238,
		0x005DE302,
		0x005DF610,
		0x005DF7B8,
		0x005DF96E,
		0x005DF9CA,
		0x005DFAAB,
		0x005DFD22,
		0x005E0090,
		0x005E0686,
		0x005E0CBB,
		0x005E0D14,
		0x005E0D81,
		0x005E29C0,
		0x005E2AEE,
		0x005E2B4A,
		0x005E2B89,
		0x005E3E80,
		0x005E3F2E,
		0x005E5D6C,
		0x005E68ED,
		0x005E69C8,
		0x005E74A1,
		0x005E79AD,
		0x005EA5E5,
		0x005EA6B2,
		0x005EA6F1,
		0x005F2C46,
		0x005F340F,
		0x005FD8E8,
		0x005FD917,
		0x00606EAC,
		0x00609125,
		0x0060BEA9,
		0x0060CEAD,
		0x0062712A,
		0x006271BA,
		0x0062725A,
		0x0062E800,
		0x0062E865,
		0x0062E9CA,
		0x0062EFFB,
		0x006304B0,
		0x006304E9,
		0x0063053F,
		0x00630BF8,
		0x00630CA5,
		0x0063139C,
		0x006334F7,
		0x00633C9A,
		0x0064D9FE,
		0x0064E474,
		0x0064E561,
		0x006511B2,
		0x0065123D,
		0x0065150F,
		0x00651573,
		0x006515C5,
		0x00651625,
		0x00651685,
		0x006516E5,
		0x0065517C,
		0x0065537D,
		0x00657B96,
		0x00657BD9,
		0x00657C5F,
		0x00657D9E,
		0x00657E25,
		0x00657E7C,
		0x006582E5,
		0x006583A0,
		0x006587A7,
		0x00658C70,
		0x006592EA,
		0x0065939C,
		0x0065962B,
		0x0065966C,
		0x0068D173,
		0x0068D3FF,
		0x0068EF33,
		0x006909F1,
		0x00691927,
		0x006921DE,
		0x006A37B8,
		0x006A38BD,
		0x006B59EB,
		0x006B5E4B,
		0x006B5F0E,
		0x006B8354,
		0x006BEBEE,
		0x006C01FF,
		0x006C104E,
		0x006C1515,
		0x006C1B72,
		0x006C2436,
		0x006C94B7,
		0x006C954F,
		0x006C9643,
		0x006CA512,
		0x006CA6C0,
		0x006CAB05,
		0x006CB23E,
		0x006CB306,
		0x006CB627,
		0x006CB67F,
		0x006CD132,
		0x006E1BFC,
		0x006E1C56,
		0x006EA438,
		0x006EED69,
		0x006EF1AA,
		0x006F2D1D,
		0x006F30B7,
		0x006F31A1,
		0x006F33F0,
		0x006F70EB,
		0x006F811C,
		0x00705369,
		0x00706BA4,
		0x00707957,
		0x0071A58E,
		0x0071C7E1,
		0x0071CB41,
		0x007328DB,
		0x00735725,
		0x007357D1,
		0x00735993,
		0x0073A290,
		0x0073A4E1,
		0x0073F921,
		0x0073FC05,
		0x00741C2D,
		0x0074320A,
		0x0074349F,
		0x0074394E,
		0x007460CD,
		0x007478FC,
		0x0074792C,
		0x00747DD8,
		0x00747F20,
		0x00748016,
		0x0074839D,
		0x007BB8FE,
		0x007BB943,
		0x007BB990,
		0x007BBA6E,
		0x007C3B60,
		0x007D3CEE,
		0x007D5CF1,
		0x007D5D60,
		0x007D6A6E,
		0x007E0047,
		0x007E199C,
		0x007E2F7D,
		0x007E37EB,
		0x007E61F9,
		0x007E64F1,
		0x007E6531,
		0x007E6720,
		0x007E6752,
		0x007E6835,
		0x007E9F27,
		0x007EBA04,
		0x007EC53E,
		0x007FA651,
		0x007FA6AC,
		0x007FA9E2,
		0x007FB546,
		0x007FB594,
		0x007FB752,
		0x007FB8E7,
		0x007FB975,
		0x007FB9E5,
		0x007FF64B,
		0x007FF870,
		0x007FFA3E,
		0x007FFD8F,
		0x008095D8,
		0x00813A9A,
		0x0081B458,
		0x0081F08A,
		0x00822843,
		0x00823648,
		0x0082D3B6,
		0x0082D44C,
		0x0082D47C,
		0x0082D61E,
		0x0082DD06,
		0x0082DD36,
		0x0082DDC7,
		0x008302D9,
		0x008311F4,
		0x0083134F,
		0x00831762,
		0x008318A5,
		0x00831AFE,
		0x00832063,
		0x0083216E,
		0x008321F0,
		0x008322F3,
		0x00832566,
		0x0083263F,
		0x00833059,
		0x008331E9,
		0x0083335F,
		0x0083A396,
		0x0083A9B6,
		0x0083E896,
		0x0083E8D6,
		0x0083ED3F,
		0x0083ED94,
		0x0083EDE7,
		0x00840BAD,
		0x00840C13,
		0x00840FA8,
		0x00844791,
		0x00844BCB,
		0x008452D3,
		0x008473DB,
		0x00847A3B,
		0x00848A10,
		0x00848D17,
		0x0084A133,
		0x0084AF98,
		0x0084B635,
		0x0084CE78,
		0x0084D25D,
		0x0084ED51,
		0x0084ED9B,
		0x0084FDAF,
		0x0084FF5B,
		0x008503D9,
		0x00853C1E,
		0x008549F1,
		0x00857241,
		0x0085A8EC,
		0x0085AB0D,
		0x0085AB65,
		0x0085ADAA,
		0x0085ADE4,
		0x0085AF3E,
		0x0085AFCD,
		0x0085B018,
		0x0085DE64,
		0x00862D9A,
		0x008631DE,
		0x0086365E,
		0x0086A405,
		0x0086A628,
		0x0086B403,
		0x0086DF75,
		0x0086E829,
		0x0086EE07,
		0x0086F108,
		0x008703CB,
		0x0087129F,
		0x00872157,
		0x00872223,
		0x00890C71,
		0x008ABEB2,
		0x008AC13E,
		0x008AD65F,
		0x008AD95F,
		0x008ADCAF,
		0x008AE033,
		0x008BA6DB,
		0x008BA893,
		0x008D0C47,
		0x008D1AF5,
		0x008D1B5B,
		0x008E9752,
		0x00905221,
		0x00905261,
		0x009052A1,
		0x009052E1,
		0x00905346,
		0x0090545D,
		0x0090549E,
		0x009054EA,
		0x00905517,
		0x00905976,
		0x009059A3,
		0x00905C25,
		0x00905C76,
		0x00905E87,
		0x00905F2E
	};

	for (auto adr : sar_addresses)
	{
		injector::WriteMemory<uint8_t>(adr + 2, 0x0F, true);
	}

	// and ecx 3FFF
	std::vector<injector::memory_pointer_tr> and_ecx_addresses{
		0x0062E9C4,
		0x00409107,
		0x00409167,
		0x00432F70,
		0x00434300,
		0x00435AF7,
		0x00435B6E,
		0x004360DA,
		0x00437C97,
		0x00437D0E,
		0x0043879A,
		0x0043B71E,
		0x0043DC0C,
		0x0043F230,
		0x0043F49E,
		0x00442230,
		0x004428FE,
		0x00445819,
		0x00445DDD,
		0x0044A020,
		0x00453831,
		0x004571B7,
		0x00457F9E,
		0x00457FFA,
		0x004590EA,
		0x00459115,
		0x00459339,
		0x00459629,
		0x004613E9,
		0x00466C90,
		0x004682C6,
		0x00468359,
		0x00468416,
		0x00468567,
		0x00468769,
		0x00468D29,
		0x00468F36,
		0x004693C9,
		0x00469609,
		0x0046989D,
		0x004699CC,
		0x00469C06,
		0x004716CE,
		0x004743F0,
		0x004764B8,
		0x0047B9D0,
		0x0047CFE0,
		0x0047FEE0,
		0x00483AE0,
		0x00485260,
		0x004888D0,
		0x0048B650,
		0x0048E273,
		0x0048E3D3,
		0x0048E553,
		0x0048F26C,
		0x0048F360,
		0x0048F9EB,
		0x0048FB48,
		0x0048FC70,
		0x004904A1,
		0x00491200,
		0x004913A5,
		0x00491446,
		0x004914E0,
		0x0049591E,
		0x0049662E,
		0x00496D3E,
		0x0049D81E,
		0x0049DFCE,
		0x0049E34D,
		0x004A07F0,
		0x004A299F,
		0x004A2DBE,
		0x004A3B7E,
		0x0050DF4A,
		0x0050DFC2,
		0x0050F204,
		0x0051460A,
		0x0051466A,
		0x005197FE,
		0x0051A599,
		0x0051CBC0,
		0x0051CC20,
		0x0051DEAE,
		0x0051DF10,
		0x00524920,
		0x0052563E,
		0x00526860,
		0x0052726E,
		0x00528208,
		0x0052891E,
		0x0052A874,
		0x0052B5FE,
		0x00534AAA,
		0x0053618E,
		0x0053883E,
		0x0053D40E,
		0x0054944E,
		0x00550AC8,
		0x00550BA8,
		0x00550C7A,
		0x00550D88,
		0x0055311C,
		0x005531DF,
		0x00553AB6,
		0x00553EFF,
		0x00554578,
		0x005553AA,
		0x005555CE,
		0x0055D689,
		0x005601CD,
		0x005616A4,
		0x00561864,
		0x0056B1B3,
		0x0057455E,
		0x00581BFA,
		0x005DCD32,
		0x005DCF65,
		0x005DCFAA,
		0x005DCFFE,
		0x005DD1F3,
		0x005DD21B,
		0x005DD2E3,
		0x005DD30B,
		0x005DD395,
		0x005DD3DD,
		0x005DD585,
		0x005DDC61,
		0x005DDE64,
		0x005DE2F6,
		0x005DF604,
		0x005DF962,
		0x005DF9BE,
		0x005E0084,
		0x005E0D08,
		0x005E0D75,
		0x005E29B4,
		0x005E2AE2,
		0x005E2B3E,
		0x005E2B7D,
		0x005E3F22,
		0x005E68E1,
		0x005E69BC,
		0x005E748C,
		0x005E79A1,
		0x005EA5D9,
		0x005EA6A6,
		0x005EA6E5,
		0x005FD8DC,
		0x00609119,
		0x0060BE9D,
		0x0060CEA1,
		0x0062711E,
		0x006271AE,
		0x0062724E,
		0x0062E7F4,
		0x0062EFEF,
		0x006304A4,
		0x00630BEC,
		0x00631390,
		0x0064D9F2,
		0x0064E468,
		0x0064E555,
		0x006511A6,
		0x00651503,
		0x006515B9,
		0x00651619,
		0x00651679,
		0x006516D9,
		0x00655371,
		0x00657B8A,
		0x00657BCD,
		0x00657D89,
		0x00657E19,
		0x00658394,
		0x00658C64,
		0x006592DE,
		0x00659390,
		0x0065961F,
		0x00659660,
		0x0068D167,
		0x0068EF27,
		0x006A37A3,
		0x006A38B1,
		0x006B59D6,
		0x006B5F02,
		0x006BEBD9,
		0x006C01F3,
		0x006C1B66,
		0x006C2421,
		0x006C94AB,
		0x006C9543,
		0x006C9637,
		0x006CA506,
		0x006CA6AB,
		0x006CAAF9,
		0x006CB232,
		0x006CB2F9,
		0x006CB673,
		0x006CD126,
		0x006E1BF0,
		0x006EED5D,
		0x006F2D11,
		0x006F30AB,
		0x006F3195,
		0x006F33E4,
		0x006F70DF,
		0x00706B98,
		0x00707942,
		0x0071A582,
		0x007328CF,
		0x00735710,
		0x00735987,
		0x0073A27B,
		0x0073A4CC,
		0x0073F915,
		0x0073FBF0,
		0x00741C21,
		0x007431FE,
		0x00743493,
		0x00743942,
		0x007460C1,
		0x007478F0,
		0x00747DC3,
		0x00747F14,
		0x0074800A,
		0x00748391,
		0x007BB8F2,
		0x007BB937,
		0x007BB984,
		0x007BBA62,
		0x007C3B54,
		0x007D3CE2,
		0x007D5CE5,
		0x007D5D54,
		0x007D6A62,
		0x007E003B,
		0x007E1990,
		0x007E2F71,
		0x007E37DF,
		0x007E61ED,
		0x007E64E5,
		0x007E6525,
		0x007E9F12,
		0x007EC529,
		0x007FA645,
		0x007FA697,
		0x007FA9D6,
		0x007FB53A,
		0x007FB588,
		0x007FB746,
		0x007FB969,
		0x007FB9D0,
		0x007FF63F,
		0x007FF85B,
		0x007FFA32,
		0x007FFD83,
		0x008095C3,
		0x00813A8E,
		0x00822837,
		0x0082363C,
		0x0082D3A1,
		0x0082D440,
		0x0082D612,
		0x0082DCF7,
		0x0082DDBB,
		0x008302C4,
		0x00831343,
		0x00831899,
		0x00831AF2,
		0x00832057,
		0x00832162,
		0x008322E7,
		0x00832551,
		0x00832633,
		0x00833353,
		0x0083E88A,
		0x0083E8CA,
		0x0083ED33,
		0x0083ED88,
		0x00840BA1,
		0x00840C07,
		0x00844BB6,
		0x008473CF,
		0x00847A2F,
		0x008489FB,
		0x0084A127,
		0x0084AF83,
		0x0084B629,
		0x0084CE63,
		0x0084D251,
		0x0084ED45,
		0x0084ED8F,
		0x0084FDA3,
		0x0084FF46,
		0x008503CD,
		0x00853C12,
		0x008549E5,
		0x00857235,
		0x0085A8E0,
		0x0085AB01,
		0x0085AB59,
		0x0085AD9E,
		0x0085ADD8,
		0x0085AF29,
		0x0085AFC1,
		0x0085B003,
		0x0085DE58,
		0x00862D85,
		0x008631D2,
		0x00863652,
		0x0086B3F7,
		0x0086DF69,
		0x0086F0F3,
		0x00871293,
		0x00872142,
		0x00872217,
		0x00890C5C,
		0x008ABEA6,
		0x008AC132,
		0x008AD653,
		0x008AD953,
		0x008ADCA3,
		0x008BA6C6,
		0x008BA887,
		0x008D0C38,
		0x008D1AE9,
		0x008D1B4F,
		0x008E973D,
		0x00905215,
		0x00905255,
		0x00905295,
		0x009052D5,
		0x0090533A,
		0x00905451,
		0x00905492,
		0x009054DE,
		0x0090550B,
		0x0090596A,
		0x00905997,
		0x00905C19,
		0x00905C6A,
		0x00905E72,
		0x00905F22,
		0x00630B6B,
		0x0068E362,
		0x0046A29B,
		0x00499769,
		0x005DDB69,
		0x00651567,
		0x0065879B,
		0x0069191B,
		0x0070535D,
		0x00747920,
		0x007FB8DB,
		0x0082D470,
		0x0082DD2A,
		0x00831756,
		0x0083EDDB,
		0x00840F9C,
		0x00848D0B,
		0x008703BF,
		0x005DE05E,
		0x0063056A
	};
	for (auto address : and_ecx_addresses)
	{
		injector::WriteMemory<uint32_t>(address + 2, 0x7FFF, true);
	}

	// and eax 3FFFh
	std::vector<injector::memory_pointer_tr> and_eax_addresses{
		0x0040C31D,
		0x0040C35D,
		0x0043DACA,
		0x0043EF5F,
		0x004407CD,
		0x0046672A,
		0x0046A058,
		0x0046DDB8,
		0x0046DF04,
		0x0048DAF7,
		0x0048E197,
		0x0048E68B,
		0x0048EBD5,
		0x0048ECA1,
		0x0048ED30,
		0x0048EDCC,
		0x0048F0EC,
		0x0048F448,
		0x00490AB4,
		0x00490C24,
		0x00491538,
		0x00491874,
		0x00491924,
		0x00498A65,
		0x004A2214,
		0x004A3017,
		0x004A3CFC,
		0x004D6C40,
		0x004F9066,
		0x00513B79,
		0x0051A2FC,
		0x0051A441,
		0x0051A726,
		0x0052A8F4,
		0x0052AE0A,
		0x0052AE9A,
		0x0052DC97,
		0x0052DE80,
		0x00534FCA,
		0x00550B0B,
		0x00550BEB,
		0x00550CFD,
		0x00550EC9,
		0x005512E0,
		0x00551350,
		0x00553226,
		0x00553375,
		0x005537A2,
		0x00553956,
		0x00553998,
		0x00553A06,
		0x00553A48,
		0x00553AF9,
		0x00553F5B,
		0x00554412,
		0x005544DA,
		0x00555186,
		0x005551C8,
		0x0055580B,
		0x0056C3C3,
		0x005743C7,
		0x0058732A,
		0x005DCC09,
		0x005DCE39,
		0x005DE225,
		0x005DF7AA,
		0x005DFA9D,
		0x005DFD14,
		0x005E0678,
		0x005E0CAD,
		0x005E3E75,
		0x005E5D5E,
		0x005F2C3B,
		0x005F3404,
		0x005FD90C,
		0x00606E97,
		0x0062E858,
		0x006304DA,
		0x00630534,
		0x00630C98,
		0x006334EA,
		0x00633C8D,
		0x00651232,
		0x00655169,
		0x00657C54,
		0x00657E6F,
		0x006582D7,
		0x0068D3EC,
		0x006909E3,
		0x006921D1,
		0x006B5E40,
		0x006B8349,
		0x006C1043,
		0x006C150A,
		0x006CB614,
		0x006E1C4B,
		0x006EA425,
		0x006EF197,
		0x006F810E,
		0x0071C7D6,
		0x0071CB36,
		0x007357C3,
		0x007E6713,
		0x007E6745,
		0x007E6822,
		0x007EB9F1,
		0x0081B44D,
		0x0081F07F,
		0x008311E9,
		0x008321E3,
		0x00833046,
		0x008331D6,
		0x0083A383,
		0x0083A9AB,
		0x0084477E,
		0x008452C0,
		0x0086A3FA,
		0x0086A61B,
		0x0086E81C,
		0x0086EDF4,
		0x008AE020,

		// Не уверен, нужна ли здесь замена
		// Нужен дополнительный анализ
		// int __cdecl inflate_blocks(_DWORD *a1, int *a2, int a3)
		0x009766B7
	};
	for (auto address : and_eax_addresses)
	{
		injector::WriteMemory<uint32_t>(address + 1, 0x7FFF, true);
	}
}